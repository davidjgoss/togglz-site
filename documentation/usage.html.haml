---
layout: base
---

%h1
  Usage

%p
  If you followed the preceding chapters, you are now ready to actually use Togglz.

%h2
  Java Code

%p
  Checking if a feature is active or not from Java code is straight forward. Just call the <code>isActive()</code> method on the corresponding enum.

%pre(class="prettyprint lang-java")
  :escaped
    if (MyFeatures.HOT_NEW_FEATURE.isActive()) {
      // do cool new stuff here
    }

%p
  You see that checking the feature state is very easy. You don't have to lookup any objects or something like this. Just call a regular method on the enum and you are done! :)

%h2
  JSF integration

%p
  The JSF integration module provides a very simple way to render page content depending on whether a feature is active or not:

%pre(class="prettyprint lang-xml")
  :escaped
    <h:panelGroup rendered="\#{features['HOT_NEW_FEATURE']}">
      <!-- Some part of the page required for HOT_NEW_FEATURE -->
    </h:panelGroup>

%h2
  JSP integration

%p
  The JSP integration module provides a simple tag to render page content depending on whether a feature is active:

%pre(class="prettyprint lang-xml")
  :escaped
    <%@ taglib uri="http://togglz.org/taglib" prefix="togglz" %>

    <togglz:feature name="HOT_NEW_FEATURE">
      <!-- Some part of the page required for HOT_NEW_FEATURE -->
    </togglz:feature>

%p
  You can also prefix the feature name with "!" to denote content that should be rendered when the feature is not active.

%h2
  Advanced Spring support

%p
  Togglz ships with some extra goodies for Spring users. If you are using Spring, make sure that you added
  the Spring integration module to your dependencies:

%pre(class="prettyprint lang-xml")
  :escaped
    <!-- Spring integration (optional) -->
    <dependency>
      <groupId>org.togglz</groupId>
      <artifactId>togglz-spring-web</artifactId>
      <version>#{site.stableVersion}</version>
    </dependency>

%a(name='FeatureProxyFactoryBean')
%h3
  FeatureProxyFactoryBean <span class="label label-important">since 1.1.0</span>

%p
  In some situations it may be required to use completely different implementation classes depending
  on whether a feature is active or not. Think for example of a case where you want to rewrite the implementation
  of some reason to improve performance.

%p
  The <code>FeatureProxyFactoryBean</code> allows to create a proxy object, that delegates all calls to one of two beans,
  depending on whether a given feature is active or not.
  See the following part of a Spring XML configuration file for an example:

%pre(class="prettyprint lang-xml")
  :escaped
    <bean id="optimizedService" class="com.example.services.HighPerformanceService" />

    <bean id="oldService" class="com.example.services.DefaultService" />

    <bean id="someService" class="org.togglz.spring.proxy.FeatureProxyFactoryBean">
      <property name="feature" value="HOT_NEW_FEATURE" />
      <property name="active" ref="optimizedService" />
      <property name="inactive" ref="oldService" />
    </bean>

%p
  This configuration shows how the <code>FeatureProxyFactoryBean</code> can be used. The factory bean has three
  required properties that have to be set. The property <code>feature</code> is the name of the feature that should be checked
  before delegating invocations. The properties <code>active</code> and <code>inactive</code> must refer to
  the two alternative implementations.

%p
  Please note that the <code>FeatureProxyFactoryBean</code> creates a standard JDK proxy. Therefore the two
  beans which receive the invocations must share a common interface that will be used to create the proxy.
  The interface to proxy will be auto detected, if both classes only share exactly one interface. In all
  other cases you will have to tell the factory bean about the interface using the <code>businessInterface</code>
  property.
